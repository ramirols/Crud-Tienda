package cibertec;

import java.awt.EventQueue;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.border.EmptyBorder;
import java.util.List;

public class GenerarReportes extends JDialog implements ActionListener {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JLabel lblNewLabel;
    private JComboBox<String> comboBox;
    private JScrollPane scrollPane;
    private JTextArea textArea;
    private JButton btnCerrar;

    private String[] tiposReportes = {
        "Ventas por Modelo",
        "Ventas en Relación a la Venta Óptima",
        "Precios en Relación al Precio Promedio",
        "Promedios, Menores y Mayores"
    };

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    GenerarReportes frame = new GenerarReportes();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public GenerarReportes() {
        setTitle("Generar reportes");
        setBounds(100, 100, 550, 341);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        lblNewLabel = new JLabel("Tipo de reporte");
        lblNewLabel.setBounds(10, 11, 103, 20);
        contentPane.add(lblNewLabel);

        comboBox = new JComboBox<>(tiposReportes);
        comboBox.setBounds(118, 10, 274, 21);
        comboBox.addActionListener(this);
        contentPane.add(comboBox);

        scrollPane = new JScrollPane();
        scrollPane.setBounds(10, 51, 514, 228);
        contentPane.add(scrollPane);

        textArea = new JTextArea();
        scrollPane.setViewportView(textArea);

        btnCerrar = new JButton("Cerrar");
        btnCerrar.setBounds(403, 10, 121, 30);
        btnCerrar.addActionListener(this);
        contentPane.add(btnCerrar);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnCerrar) {
            dispose();
        } else if (e.getSource() == comboBox) {
            generarReporte();
        }
    }

    private void generarReporte() {
        int opcion = comboBox.getSelectedIndex();
        switch (opcion) {
            case 0:
                mostrarVentasPorModelo();
                break;
            case 1:
                mostrarVentasRelacionVentaOptima();
                break;
            case 2:
                mostrarPreciosRelacionPrecioPromedio();
                break;
            case 3:
                mostrarPromediosMenoresMayores();
                break;
        }
    }

    // método para mostrar las ventas por modelo
    private void mostrarVentasPorModelo() {
        String reporte = "VENTAS POR MODELO\n";
        for (int i = 0; i < Tienda.refrigeradoras.length; i++) {
            double importeTotal = Tienda.refrigeradoras[i][1] * Tienda.refrigeradoras[i][2]; // Precio * Unidades vendidas
            double aporteCuotaDiaria = (importeTotal / Tienda.cuotaDiaria) * 100;
            reporte += "Modelo: " + Tienda.refrigeradoras[i][0] + "\n";
            reporte += "Cantidad de ventas: " + Tienda.refrigeradoras[i][2] + "\n";
            reporte += "Importe total vendido: S/. " + String.format("%.2f", importeTotal) + "\n";
            reporte += "Aporte a la cuota diaria: " + String.format("%.2f", aporteCuotaDiaria) + "%\n\n";
        }
        textArea.setText(reporte);
    }

    // método para mostrar las ventas en relación a la venta óptima
    private void mostrarVentasRelacionVentaOptima() {
        String reporte = "VENTAS EN RELACIÓN A LA VENTA ÓPTIMA\n";
        for (int i = 0; i < Tienda.refrigeradoras.length; i++) {
            int diferencia = Tienda.refrigeradoras[i][2] - Tienda.cantidadOptima;
            String comparacion = diferencia > 0 ? 
                "(" + diferencia + " más que la cantidad óptima)" : 
                (diferencia < 0 ? 
                "(" + (-diferencia) + " menos que la cantidad óptima)" : 
                "(igual a la cantidad óptima)");
            reporte += "Modelo: " + Tienda.refrigeradoras[i][0] + "\n";
            reporte += "Cantidad de unidades vendidas: " + Tienda.refrigeradoras[i][2] + " " + comparacion + "\n\n";
        }
        textArea.setText(reporte);
    }

    // método para mostrar los precios en relación al precio promedio
    private void mostrarPreciosRelacionPrecioPromedio() {
        double precioPromedio = obtenerPrecioPromedio();
        String reporte = "PRECIOS EN RELACIÓN AL PRECIO PROMEDIO\n";
        for (int i = 0; i < Tienda.refrigeradoras.length; i++) {
            String comparacion = (Tienda.refrigeradoras[i][1] > precioPromedio) ? 
                "(Mayor al promedio)" : (Tienda.refrigeradoras[i][1] < precioPromedio) ? 
                "(Menor al promedio)" : 
                "(Igual al promedio)";
            reporte += "Modelo: " + Tienda.refrigeradoras[i][0] + "\n";
            reporte += "Precio: S/. " + Tienda.refrigeradoras[i][1] + " " + comparacion + "\n\n";
        }
        textArea.setText(reporte);
    }

    // método para mostrar promedios, menores y mayores
    private void mostrarPromediosMenoresMayores() {
        double precioPromedio = obtenerPrecioPromedio();
        double precioMenor = obtenerPrecioMenor();
        double precioMayor = obtenerPrecioMayor();
        String reporte = "PROMEDIOS, MENORES Y MAYORES\n";
        reporte += "Precio promedio: S/. " + String.format("%.2f", precioPromedio) + "\n";
        reporte += "Precio menor: S/. " + precioMenor + "\n";
        reporte += "Precio mayor: S/. " + precioMayor + "\n";
        textArea.setText(reporte);
    }

    private double obtenerPrecioPromedio() {
        double total = 0;
        for (int i = 0; i < Tienda.refrigeradoras.length; i++) {
            total += Tienda.refrigeradoras[i][1];
        }
        return total / Tienda.refrigeradoras.length;
    }

    private double obtenerPrecioMenor() {
        double menor = Double.MAX_VALUE;
        for (int i = 0; i < Tienda.refrigeradoras.length; i++) {
            if (Tienda.refrigeradoras[i][1] < menor) {
                menor = Tienda.refrigeradoras[i][1];
            }
        }
        return menor;
    }

    private double obtenerPrecioMayor() {
        double mayor = Double.MIN_VALUE;
        for (int i = 0; i < Tienda.refrigeradoras.length; i++) {
            if (Tienda.refrigeradoras[i][1] > mayor) {
                mayor = Tienda.refrigeradoras[i][1];
            }
        }
        return mayor;
    }
}
