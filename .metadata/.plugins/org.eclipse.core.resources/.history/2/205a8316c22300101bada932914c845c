package cibertec;

import java.awt.EventQueue;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.border.EmptyBorder;

public class GenerarReportes extends JDialog implements ActionListener {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JLabel lblNewLabel;
    private JComboBox<String> comboBox;
    private JScrollPane scrollPane;
    private JTextArea textArea;
    private JButton btnCerrar;

    // Variables de apoyo
    private String[] tiposReportes = {
        "Ventas por modelo",
        "Ventas en relación a la venta óptima",
        "Precios en relación al precio promedio",
        "Promedios, menores y mayores"
    };

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    GenerarReportes frame = new GenerarReportes();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the frame.
     */
    public GenerarReportes() {
        setTitle("Generar reportes");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);  // Cambio aquí
        setBounds(100, 100, 550, 341);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        lblNewLabel = new JLabel("Tipo de reporte");
        lblNewLabel.setBounds(10, 11, 103, 20);
        contentPane.add(lblNewLabel);

        comboBox = new JComboBox<>(tiposReportes);
        comboBox.setBounds(118, 10, 274, 21);
        comboBox.addActionListener(this);
        contentPane.add(comboBox);

        scrollPane = new JScrollPane();
        scrollPane.setBounds(10, 51, 514, 228);
        contentPane.add(scrollPane);

        textArea = new JTextArea();
        scrollPane.setViewportView(textArea);

        btnCerrar = new JButton("Cerrar");
        btnCerrar.setBounds(403, 10, 121, 30);
        btnCerrar.addActionListener(this);
        contentPane.add(btnCerrar);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnCerrar) {
            dispose();
        } else if (e.getSource() == comboBox) {
            generarReporte();
        }
    }

    // Método para generar reportes
    private void generarReporte() {
        int opcion = comboBox.getSelectedIndex();
        switch (opcion) {
            case 0:
                mostrarVentasPorModelo();
                break;
            case 1:
                mostrarVentasRelacionadasAVentaOptima();
                break;
            case 2:
                mostrarPreciosRelacionadosAlPrecioPromedio();
                break;
            case 3:
                mostrarPromediosMenoresMayores();
                break;
        }
    }

    // Reporte de ventas por modelo
    private void mostrarVentasPorModelo() {
        String reporte = "VENTAS POR MODELO:\n";
        reporte += "Modelo 1: " + Tienda.modelo0 + "\n";
        reporte += "Modelo 2: " + Tienda.modelo1 + "\n";
        reporte += "Modelo 3: " + Tienda.modelo2 + "\n";
        reporte += "Modelo 4: " + Tienda.modelo3 + "\n";
        reporte += "Modelo 5: " + Tienda.modelo4 + "\n";
        textArea.setText(reporte);
    }

    // Reporte de ventas en relación a la venta óptima
    private void mostrarVentasRelacionadasAVentaOptima() {
        String reporte = "VENTAS EN RELACIÓN A LA VENTA ÓPTIMA:\n";
        double ventasTotales = Tienda.precio0 + Tienda.precio1 + Tienda.precio2 + Tienda.precio3 + Tienda.precio4;
        if (ventasTotales >= Tienda.cuotaDiaria) {
            reporte += "Las ventas han alcanzado la cuota diaria.\n";
        } else {
            reporte += "Las ventas no han alcanzado la cuota diaria.\n";
        }
        textArea.setText(reporte);
    }

    // Reporte de precios en relación al precio promedio
    private void mostrarPreciosRelacionadosAlPrecioPromedio() {
        String reporte = "PRECIOS EN RELACIÓN AL PRECIO PROMEDIO:\n";
        double precioPromedio = (Tienda.precio0 + Tienda.precio1 + Tienda.precio2 + Tienda.precio3 + Tienda.precio4) / 5;
        reporte += "Precio Promedio: S/ " + precioPromedio + "\n";
        if (Tienda.precio0 > precioPromedio) reporte += Tienda.modelo0 + " tiene un precio superior al promedio.\n";
        if (Tienda.precio1 > precioPromedio) reporte += Tienda.modelo1 + " tiene un precio superior al promedio.\n";
        if (Tienda.precio2 > precioPromedio) reporte += Tienda.modelo2 + " tiene un precio superior al promedio.\n";
        if (Tienda.precio3 > precioPromedio) reporte += Tienda.modelo3 + " tiene un precio superior al promedio.\n";
        if (Tienda.precio4 > precioPromedio) reporte += Tienda.modelo4 + " tiene un precio superior al promedio.\n";
        textArea.setText(reporte);
    }

    // Reporte de promedios, menores y mayores
    private void mostrarPromediosMenoresMayores() {
        String reporte = "PROMEDIOS, MENORES Y MAYORES:\n";
        double[] precios = {Tienda.precio0, Tienda.precio1, Tienda.precio2, Tienda.precio3, Tienda.precio4};
        double promedio = calcularPromedio(precios);
        double menor = obtenerMenor(precios);
        double mayor = obtenerMayor(precios);
        
        reporte += "Precio Promedio: S/ " + promedio + "\n";
        reporte += "Precio Menor: S/ " + menor + "\n";
        reporte += "Precio Mayor: S/ " + mayor + "\n";
        textArea.setText(reporte);
    }

    // Método para calcular el promedio
    private double calcularPromedio(double[] precios) {
        double suma = 0;
        for (double precio : precios) {
            suma += precio;
        }
        return suma / precios.length;
    }

    // Método para obtener el precio menor
    private double obtenerMenor(double[] precios) {
        double menor = precios[0];
        for (double precio : precios) {
            if (precio < menor) menor = precio;
        }
        return menor;
    }

    // Método para obtener el precio mayor
    private double obtenerMayor(double[] precios) {
        double mayor = precios[0];
        for (double precio : precios) {
            if (precio > mayor) mayor = precio;
        }
        return mayor;
    }
}
