package cibertec;

import java.awt.EventQueue;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.border.EmptyBorder;

public class GenerarReportes extends JDialog implements ActionListener {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JLabel lblNewLabel;
    private JComboBox<String> comboBox;
    private JScrollPane scrollPane;
    private JTextArea textArea;
    private JButton btnCerrar;

    // Variables de apoyo
    private String[] tiposReportes = {
        "Ventas por Modelo",
        "Ventas en Relación a la Venta Óptima",
        "Precios en Relación al Precio Promedio",
        "Promedios, Menores y Mayores"
    };

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    GenerarReportes frame = new GenerarReportes();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public GenerarReportes() {
        setTitle("Generar reportes");
        setBounds(100, 100, 550, 341);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        lblNewLabel = new JLabel("Tipo de reporte");
        lblNewLabel.setBounds(10, 11, 103, 20);
        contentPane.add(lblNewLabel);

        comboBox = new JComboBox<>(tiposReportes);
        comboBox.setBounds(118, 10, 274, 21);
        comboBox.addActionListener(this);
        contentPane.add(comboBox);

        scrollPane = new JScrollPane();
        scrollPane.setBounds(10, 51, 514, 228);
        contentPane.add(scrollPane);

        textArea = new JTextArea();
        scrollPane.setViewportView(textArea);

        btnCerrar = new JButton("Cerrar");
        btnCerrar.setBounds(403, 10, 121, 30);
        btnCerrar.addActionListener(this);
        contentPane.add(btnCerrar);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnCerrar) {
            dispose();
        } else if (e.getSource() == comboBox) {
            generarReporte();
        }
    }

    private void generarReporte() {
        int opcion = comboBox.getSelectedIndex();
        switch (opcion) {
            case 0:
                mostrarVentasPorModelo();
                break;
            case 1:
                mostrarVentasRelacionVentaOptima();
                break;
            case 2:
                mostrarPreciosRelacionPrecioPromedio();
                break;
            case 3:
                mostrarPromediosMenoresMayores();
                break;
        }
    }

    // Método para mostrar las ventas por modelo
    private void mostrarVentasPorModelo() {
        String reporte = "";
        double cuotaDiaria = Tienda.cuotaDiaria;

        // Generar reporte para cada modelo
        reporte += "VENTAS POR MODELO\n";

        // Modelo 0
        int cantidadVendida0 = Tienda.unidadesVendidas0;
        double importeTotal0 = cantidadVendida0 * Tienda.precio0;
        double aporte0 = (importeTotal0 / cuotaDiaria) * 100;
        reporte += "Modelo: " + Tienda.modelo0 + "\n";
        reporte += "Cantidad de ventas: " + cantidadVendida0 + "\n";
        reporte += "Cantidad de unidades vendidas: " + cantidadVendida0 + "\n";
        reporte += String.format("Importe total vendido: S/. %.2f\n", importeTotal0);
        reporte += String.format("Aporte a la cuota diaria: %.2f%%\n", aporte0);

        // Repetir para los otros modelos (modelo1, modelo2, etc.)
        // Modelo 1
        int cantidadVendida1 = Tienda.unidadesVendidas1;
        double importeTotal1 = cantidadVendida1 * Tienda.precio1;
        double aporte1 = (importeTotal1 / cuotaDiaria) * 100;
        reporte += "Modelo: " + Tienda.modelo1 + "\n";
        reporte += "Cantidad de ventas: " + cantidadVendida1 + "\n";
        reporte += "Cantidad de unidades vendidas: " + cantidadVendida1 + "\n";
        reporte += String.format("Importe total vendido: S/. %.2f\n", importeTotal1);
        reporte += String.format("Aporte a la cuota diaria: %.2f%%\n", aporte1);

        // Modelo 2
        int cantidadVendida2 = Tienda.unidadesVendidas2;
        double importeTotal2 = cantidadVendida2 * Tienda.precio2;
        double aporte2 = (importeTotal2 / cuotaDiaria) * 100;
        reporte += "Modelo: " + Tienda.modelo2 + "\n";
        reporte += "Cantidad de ventas: " + cantidadVendida2 + "\n";
        reporte += "Cantidad de unidades vendidas: " + cantidadVendida2 + "\n";
        reporte += String.format("Importe total vendido: S/. %.2f\n", importeTotal2);
        reporte += String.format("Aporte a la cuota diaria: %.2f%%\n", aporte2);

        // Modelo 3
        int cantidadVendida3 = Tienda.unidadesVendidas3;
        double importeTotal3 = cantidadVendida3 * Tienda.precio3;
        double aporte3 = (importeTotal3 / cuotaDiaria) * 100;
        reporte += "Modelo: " + Tienda.modelo3 + "\n";
        reporte += "Cantidad de ventas: " + cantidadVendida3 + "\n";
        reporte += "Cantidad de unidades vendidas: " + cantidadVendida3 + "\n";
        reporte += String.format("Importe total vendido: S/. %.2f\n", importeTotal3);
        reporte += String.format("Aporte a la cuota diaria: %.2f%%\n", aporte3);

        // Modelo 4
        int cantidadVendida4 = Tienda.unidadesVendidas4;
        double importeTotal4 = cantidadVendida4 * Tienda.precio4;
        double aporte4 = (importeTotal4 / cuotaDiaria) * 100;
        reporte += "Modelo: " + Tienda.modelo4 + "\n";
        reporte += "Cantidad de ventas: " + cantidadVendida4 + "\n";
        reporte += "Cantidad de unidades vendidas: " + cantidadVendida4 + "\n";
        reporte += String.format("Importe total vendido: S/. %.2f\n", importeTotal4);
        reporte += String.format("Aporte a la cuota diaria: %.2f%%\n", aporte4);

        textArea.setText(reporte);
    }


    // Método para mostrar las ventas en relación a la venta óptima
    private void mostrarVentasEnRelacionAVentaOptima() {
        String reporte = "";
        int cantidadOptima = Tienda.cantidadOptima;

        // Generar reporte para cada modelo
        reporte += "VENTAS EN RELACIÓN A LA VENTA ÓPTIMA\n";

        // Modelo 0
        int cantidadVendida0 = Tienda.unidadesVendidas0;
        reporte += "Modelo: " + Tienda.modelo0 + "\n";
        reporte += "Cantidad de unidades vendidas: " + cantidadVendida0 + " (" + 
            (cantidadVendida0 > cantidadOptima ? (cantidadVendida0 - cantidadOptima) + " más que la cantidad óptima" :
            cantidadVendida0 == cantidadOptima ? "igual a la cantidad óptima" :
            (cantidadOptima - cantidadVendida0) + " menos que la cantidad óptima") + ")\n";

        // Repetir para los otros modelos (modelo1, modelo2, etc.)
        // Modelo 1
        int cantidadVendida1 = Tienda.unidadesVendidas1;
        reporte += "Modelo: " + Tienda.modelo1 + "\n";
        reporte += "Cantidad de unidades vendidas: " + cantidadVendida1 + " (" + 
            (cantidadVendida1 > cantidadOptima ? (cantidadVendida1 - cantidadOptima) + " más que la cantidad óptima" :
            cantidadVendida1 == cantidadOptima ? "igual a la cantidad óptima" :
            (cantidadOptima - cantidadVendida1) + " menos que la cantidad óptima") + ")\n";

        // Modelo 2
        int cantidadVendida2 = Tienda.unidadesVendidas2;
        reporte += "Modelo: " + Tienda.modelo2 + "\n";
        reporte += "Cantidad de unidades vendidas: " + cantidadVendida2 + " (" + 
            (cantidadVendida2 > cantidadOptima ? (cantidadVendida2 - cantidadOptima) + " más que la cantidad óptima" :
            cantidadVendida2 == cantidadOptima ? "igual a la cantidad óptima" :
            (cantidadOptima - cantidadVendida2) + " menos que la cantidad óptima") + ")\n";

        // Modelo 3
        int cantidadVendida3 = Tienda.unidadesVendidas3;
        reporte += "Modelo: " + Tienda.modelo3 + "\n";
        reporte += "Cantidad de unidades vendidas: " + cantidadVendida3 + " (" + 
            (cantidadVendida3 > cantidadOptima ? (cantidadVendida3 - cantidadOptima) + " más que la cantidad óptima" :
            cantidadVendida3 == cantidadOptima ? "igual a la cantidad óptima" :
            (cantidadOptima - cantidadVendida3) + " menos que la cantidad óptima") + ")\n";

        // Modelo 4
        int cantidadVendida4 = Tienda.unidadesVendidas4;
        reporte += "Modelo: " + Tienda.modelo4 + "\n";
        reporte += "Cantidad de unidades vendidas: " + cantidadVendida4 + " (" + 
            (cantidadVendida4 > cantidadOptima ? (cantidadVendida4 - cantidadOptima) + " más que la cantidad óptima" :
            cantidadVendida4 == cantidadOptima ? "igual a la cantidad óptima" :
            (cantidadOptima - cantidadVendida4) + " menos que la cantidad óptima") + ")\n";

        textArea.setText(reporte);
    }


    // Método para mostrar los precios en relación al precio promedio
    private void mostrarPreciosRelacionPrecioPromedio() {
        double precioPromedio = obtenerPrecioPromedio();
        String reporte = "PRECIOS EN RELACIÓN AL PRECIO PROMEDIO\n";
        for (int i = 0; i < 5; i++) {
            double precio = obtenerPrecioPorModelo(i);
            String comparacion = (precio > precioPromedio) ? 
                "(Mayor al promedio)" : (precio < precioPromedio) ? 
                "(Menor al promedio)" : 
                "(Igual al promedio)";
            reporte += "Modelo: " + obtenerModeloPorIndice(i) + "\n";
            reporte += "Precio: S/. " + precio + " " + comparacion + "\n\n";
        }
        textArea.setText(reporte);
    }

    // Método para mostrar promedios, menores y mayores
    private void mostrarPromediosMenoresMayores() {
        double precioPromedio = obtenerPrecioPromedio();
        double precioMenor = obtenerPrecioMenor();
        double precioMayor = obtenerPrecioMayor();
        double anchoPromedio = obtenerAnchoPromedio();
        double anchoMenor = obtenerAnchoMenor();
        double anchoMayor = obtenerAnchoMayor();

        String reporte = "PROMEDIOS, MENORES Y MAYORES\n";
        reporte += "Precio promedio: S/. " + String.format("%.2f", precioPromedio) + "\n";
        reporte += "Precio menor: S/. " + precioMenor + "\n";
        reporte += "Precio mayor: S/. " + precioMayor + "\n";
        reporte += "Ancho promedio: " + String.format("%.2f", anchoPromedio) + " cm\n";
        reporte += "Ancho menor: " + anchoMenor + " cm\n";
        reporte += "Ancho mayor: " + anchoMayor + " cm\n";
        textArea.setText(reporte);
    }

    // Métodos auxiliares para obtener los valores de Tienda
    private double obtenerPrecioPorModelo(int indice) {
        switch (indice) {
            case 0: return Tienda.precio0;
            case 1: return Tienda.precio1;
            case 2: return Tienda.precio2;
            case 3: return Tienda.precio3;
            case 4: return Tienda.precio4;
            default: return 0;
        }
    }

    private String obtenerModeloPorIndice(int indice) {
        switch (indice) {
            case 0: return Tienda.modelo0;
            case 1: return Tienda.modelo1;
            case 2: return Tienda.modelo2;
            case 3: return Tienda.modelo3;
            case 4: return Tienda.modelo4;
            default: return "";
        }
    }

    private double obtenerPrecioPromedio() {
        return (Tienda.precio0 + Tienda.precio1 + Tienda.precio2 + Tienda.precio3 + Tienda.precio4) / 5;
    }

    private double obtenerPrecioMenor() {
        return Math.min(Math.min(Math.min(Tienda.precio0, Tienda.precio1), 
                                 Math.min(Tienda.precio2, Tienda.precio3)), Tienda.precio4);
    }

    private double obtenerPrecioMayor() {
        return Math.max(Math.max(Math.max(Tienda.precio0, Tienda.precio1), 
                                 Math.max(Tienda.precio2, Tienda.precio3)), Tienda.precio4);
    }

    private double obtenerAnchoPromedio() {
        return (Tienda.ancho0 + Tienda.ancho1 + Tienda.ancho2 + Tienda.ancho3 + Tienda.ancho4) / 5;
    }

    private double obtenerAnchoMenor() {
        return Math.min(Math.min(Math.min(Tienda.ancho0, Tienda.ancho1), 
                                 Math.min(Tienda.ancho2, Tienda.ancho3)), Tienda.ancho4);
    }

    private double obtenerAnchoMayor() {
        return Math.max(Math.max(Math.max(Tienda.ancho0, Tienda.ancho1), 
                                 Math.max(Tienda.ancho2, Tienda.ancho3)), Tienda.ancho4);
    }
}
